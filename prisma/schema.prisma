
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Registration {
  id             String   @id @default(cuid())
  nisn           String   @unique
  namaLengkap    String
  jenisKelamin   Gender
  nomorTelepon   String?         // opsional, tidak semua siswa punya nomor sendiri
  sekolahAsal    String
  tempatLahir    String
  tanggalLahir   DateTime
  alamat         String
  status         RegistrationStatus @default(TERDAFTAR)
  
  namaAyah       String
  pekerjaanAyah  String?         // opsional, ada yang mungkin tidak diisi
  namaIbu        String
  pekerjaanIbu   String?         // opsional
  rekomendasiDari String?        // opsional

  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

enum RegistrationStatus {
  TERDAFTAR
  DITERIMA
  DITOLAK
	@@map("Status")
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}